// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#ifndef PROTOBUF_config_2eproto__INCLUDED
#define PROTOBUF_config_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace athena {
namespace config {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_config_2eproto();
void protobuf_AssignDesc_config_2eproto();
void protobuf_ShutdownFile_config_2eproto();

class Config;

// ===================================================================

class Config : public ::google::protobuf::Message {
 public:
  Config();
  virtual ~Config();

  Config(const Config& from);

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Config& default_instance();

  void Swap(Config* other);

  // implements Message ----------------------------------------------

  Config* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string localization_mode_ = 1;
  inline bool has_localization_mode_() const;
  inline void clear_localization_mode_();
  static const int kLocalizationModeFieldNumber = 1;
  inline const ::std::string& localization_mode_() const;
  inline void set_localization_mode_(const ::std::string& value);
  inline void set_localization_mode_(const char* value);
  inline void set_localization_mode_(const char* value, size_t size);
  inline ::std::string* mutable_localization_mode_();
  inline ::std::string* release_localization_mode_();
  inline void set_allocated_localization_mode_(::std::string* localization_mode_);

  // optional string source_file_ = 2;
  inline bool has_source_file_() const;
  inline void clear_source_file_();
  static const int kSourceFileFieldNumber = 2;
  inline const ::std::string& source_file_() const;
  inline void set_source_file_(const ::std::string& value);
  inline void set_source_file_(const char* value);
  inline void set_source_file_(const char* value, size_t size);
  inline ::std::string* mutable_source_file_();
  inline ::std::string* release_source_file_();
  inline void set_allocated_source_file_(::std::string* source_file_);

  // optional string calib_ = 3;
  inline bool has_calib_() const;
  inline void clear_calib_();
  static const int kCalibFieldNumber = 3;
  inline const ::std::string& calib_() const;
  inline void set_calib_(const ::std::string& value);
  inline void set_calib_(const char* value);
  inline void set_calib_(const char* value, size_t size);
  inline ::std::string* mutable_calib_();
  inline ::std::string* release_calib_();
  inline void set_allocated_calib_(::std::string* calib_);

  // @@protoc_insertion_point(class_scope:athena.config.Config)
 private:
  inline void set_has_localization_mode_();
  inline void clear_has_localization_mode_();
  inline void set_has_source_file_();
  inline void clear_has_source_file_();
  inline void set_has_calib_();
  inline void clear_has_calib_();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* localization_mode__;
  ::std::string* source_file__;
  ::std::string* calib__;
  friend void  protobuf_AddDesc_config_2eproto();
  friend void protobuf_AssignDesc_config_2eproto();
  friend void protobuf_ShutdownFile_config_2eproto();

  void InitAsDefaultInstance();
  static Config* default_instance_;
};
// ===================================================================


// ===================================================================

// Config

// optional string localization_mode_ = 1;
inline bool Config::has_localization_mode_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Config::set_has_localization_mode_() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Config::clear_has_localization_mode_() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Config::clear_localization_mode_() {
  if (localization_mode__ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    localization_mode__->clear();
  }
  clear_has_localization_mode_();
}
inline const ::std::string& Config::localization_mode_() const {
  // @@protoc_insertion_point(field_get:athena.config.Config.localization_mode_)
  return *localization_mode__;
}
inline void Config::set_localization_mode_(const ::std::string& value) {
  set_has_localization_mode_();
  if (localization_mode__ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    localization_mode__ = new ::std::string;
  }
  localization_mode__->assign(value);
  // @@protoc_insertion_point(field_set:athena.config.Config.localization_mode_)
}
inline void Config::set_localization_mode_(const char* value) {
  set_has_localization_mode_();
  if (localization_mode__ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    localization_mode__ = new ::std::string;
  }
  localization_mode__->assign(value);
  // @@protoc_insertion_point(field_set_char:athena.config.Config.localization_mode_)
}
inline void Config::set_localization_mode_(const char* value, size_t size) {
  set_has_localization_mode_();
  if (localization_mode__ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    localization_mode__ = new ::std::string;
  }
  localization_mode__->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:athena.config.Config.localization_mode_)
}
inline ::std::string* Config::mutable_localization_mode_() {
  set_has_localization_mode_();
  if (localization_mode__ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    localization_mode__ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:athena.config.Config.localization_mode_)
  return localization_mode__;
}
inline ::std::string* Config::release_localization_mode_() {
  clear_has_localization_mode_();
  if (localization_mode__ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = localization_mode__;
    localization_mode__ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Config::set_allocated_localization_mode_(::std::string* localization_mode_) {
  if (localization_mode__ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete localization_mode__;
  }
  if (localization_mode_) {
    set_has_localization_mode_();
    localization_mode__ = localization_mode_;
  } else {
    clear_has_localization_mode_();
    localization_mode__ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:athena.config.Config.localization_mode_)
}

// optional string source_file_ = 2;
inline bool Config::has_source_file_() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Config::set_has_source_file_() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Config::clear_has_source_file_() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Config::clear_source_file_() {
  if (source_file__ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_file__->clear();
  }
  clear_has_source_file_();
}
inline const ::std::string& Config::source_file_() const {
  // @@protoc_insertion_point(field_get:athena.config.Config.source_file_)
  return *source_file__;
}
inline void Config::set_source_file_(const ::std::string& value) {
  set_has_source_file_();
  if (source_file__ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_file__ = new ::std::string;
  }
  source_file__->assign(value);
  // @@protoc_insertion_point(field_set:athena.config.Config.source_file_)
}
inline void Config::set_source_file_(const char* value) {
  set_has_source_file_();
  if (source_file__ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_file__ = new ::std::string;
  }
  source_file__->assign(value);
  // @@protoc_insertion_point(field_set_char:athena.config.Config.source_file_)
}
inline void Config::set_source_file_(const char* value, size_t size) {
  set_has_source_file_();
  if (source_file__ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_file__ = new ::std::string;
  }
  source_file__->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:athena.config.Config.source_file_)
}
inline ::std::string* Config::mutable_source_file_() {
  set_has_source_file_();
  if (source_file__ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_file__ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:athena.config.Config.source_file_)
  return source_file__;
}
inline ::std::string* Config::release_source_file_() {
  clear_has_source_file_();
  if (source_file__ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = source_file__;
    source_file__ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Config::set_allocated_source_file_(::std::string* source_file_) {
  if (source_file__ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_file__;
  }
  if (source_file_) {
    set_has_source_file_();
    source_file__ = source_file_;
  } else {
    clear_has_source_file_();
    source_file__ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:athena.config.Config.source_file_)
}

// optional string calib_ = 3;
inline bool Config::has_calib_() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Config::set_has_calib_() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Config::clear_has_calib_() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Config::clear_calib_() {
  if (calib__ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    calib__->clear();
  }
  clear_has_calib_();
}
inline const ::std::string& Config::calib_() const {
  // @@protoc_insertion_point(field_get:athena.config.Config.calib_)
  return *calib__;
}
inline void Config::set_calib_(const ::std::string& value) {
  set_has_calib_();
  if (calib__ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    calib__ = new ::std::string;
  }
  calib__->assign(value);
  // @@protoc_insertion_point(field_set:athena.config.Config.calib_)
}
inline void Config::set_calib_(const char* value) {
  set_has_calib_();
  if (calib__ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    calib__ = new ::std::string;
  }
  calib__->assign(value);
  // @@protoc_insertion_point(field_set_char:athena.config.Config.calib_)
}
inline void Config::set_calib_(const char* value, size_t size) {
  set_has_calib_();
  if (calib__ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    calib__ = new ::std::string;
  }
  calib__->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:athena.config.Config.calib_)
}
inline ::std::string* Config::mutable_calib_() {
  set_has_calib_();
  if (calib__ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    calib__ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:athena.config.Config.calib_)
  return calib__;
}
inline ::std::string* Config::release_calib_() {
  clear_has_calib_();
  if (calib__ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = calib__;
    calib__ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Config::set_allocated_calib_(::std::string* calib_) {
  if (calib__ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete calib__;
  }
  if (calib_) {
    set_has_calib_();
    calib__ = calib_;
  } else {
    clear_has_calib_();
    calib__ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:athena.config.Config.calib_)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace config
}  // namespace athena

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_config_2eproto__INCLUDED
